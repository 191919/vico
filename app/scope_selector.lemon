/*
 * Copyright (c) 2008-2012 Martin Hedenfalk <martin@vicoapp.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

%include {
#include "scope_selector_parser.h"
#include <stdlib.h>
#include <assert.h>
}

%name scopeSelectorParse

%extra_argument		{ struct scope_state *state }

%token_type		{ struct scope * }
%type scopelist		{ struct scope_list * }
%type limited_scopelist	{ struct scope_list * }
%type selector		{ struct scope_expr * }
%type expr		{ struct scope_expr * }

%left AND.
%left OR.
%left COMMA.
%left MINUS.

selector ::= expr(X).				{ state->top_level_expr = X; }

expr(LH) ::= limited_scopelist(SL).		{ LH = mk_expr(state, SL); }
expr(LH) ::= expr(A) OR expr(B).		{ LH = mk_expr_op(state, OR, A, B); }
expr(LH) ::= expr(A) AND expr(B).		{ LH = mk_expr_op(state, AND, A, B); }
expr(LH) ::= LPAREN expr(X) RPAREN.		{ LH = X; }
expr(LH) ::= expr(A) MINUS expr(B).		{ LH = mk_expr_op(state, MINUS, A, B); }
expr(LH) ::= expr(A) COMMA expr(B).		{ LH = mk_expr_op(state, COMMA, A, B); }

limited_scopelist(LH) ::= scopelist(SL).	{	LH = SL; }

limited_scopelist(LH) ::= scopelist(SL) DOLLAR.	{
							LH = SL;
							TAILQ_LAST(SL, scope_list)->last = 1;
						}

scopelist(LH) ::= SCOPE(S).			{
							LH = &state->lists[state->nlists++];
							TAILQ_INIT(LH);
							TAILQ_INSERT_TAIL(LH, S, next);
						}
scopelist(LH) ::= scopelist(SL) GT SCOPE(S).	{
							LH = SL;
							S->child = 1;
							TAILQ_INSERT_TAIL(LH, S, next);
						}
scopelist(LH) ::= scopelist(SL) SCOPE(S).	{
							LH = SL;
							TAILQ_INSERT_TAIL(LH, S, next);
						}

