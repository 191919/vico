=== Before next version

* rename ProjectDelegate to ViFileExplorer? ViProjectController? ViExplorer? ViFileController?

! crash in explorer update

* explorer spinner is hidden by new path control
  => move it, where!? auto-hide something else?


=== Would be nice to have in next version
* don't overwrite read-only files!
* go back to last focused document when closing a document
* push marks
* implement c-w in insert mode, alias as <alt-backspace>
* regression: symbol search no longer focuses first match
* should check all documents for external changes when app becomes active again

* ctrl-y w/caret at bottom of screen causes rendering artifacts in line number view, and SLOWS DOWN the scrolling. WTF?


=== Probably not in next version
* show baseURL in window title!
* ex command "+$" raises exception
* :/search doesn't work with 'nowrapscan'


* event for changed working directory (for updating scm status)
* search with 'nowrapscan' should issue 'not found' message

* xcode/Run throws exception:
2011-08-15 13:42:56.959 Vico[3043:403] [<__NSCFString 0x4016dcec0> valueForUndefinedKey:]: this class is not key value coding-compliant for the key title.
2011-08-15 13:42:56.967 Vico[3043:403] (
	0   CoreFoundation                      0x00007fff8f53a986 __exceptionPreprocess + 198
	1   libobjc.A.dylib                     0x00007fff8a789d5e objc_exception_throw + 43
	2   CoreFoundation                      0x00007fff8f5c45a9 -[NSException raise] + 9
	3   Foundation                          0x00007fff8dedce6f -[NSObject(NSKeyValueCoding) valueForUndefinedKey:] + 240

* cw<cmd-v> and repeat inserts pasteboard twice
* repeating completed text should not re-trigger completion!

! vertical splits are buggy

* splitting functions should accept an anchor argument (left, right, up, down)

* list ctrl-s in menus
* list ctrl-n in menus (and other completions)

* vicotool as filter / read from stdin
* goto line (from ex, G works fine) doesn't push on jump list
* document :s replacement syntax ($0, ${?0:bla} etc)
* scriptable settings with :set
* can we map ys to a new operator (surround), with y{motion} still working?
* notion of <leader> key in maps

* "Open all with current extension as..." menu like sublime in language syntax menu
* bring back explorer / folder bookmarks
* let untitled documents have a custom title:
  -> untitled documents should show up in ctrl-s completions
  -> commands can re-use special buffers (ie, a *finger* buffer, or a *shell* buffer)

* order fuzzy search results wrt last opened/used time
* less lame notification of modified documents in tabs (don't append * in title!)
* replace ViError class with NSError category

* @godDLL: can I have a preference to open new files that were opened
  externally (double-click in Finder, vicotool, etc) not in a new tab, not
  in current view, but in a new window?

* vim tag text objects (it, at)
* vicotool +excmd file
* R (replace mode)
* i_CTRL-o (execute one normal mode command in insert mode)
* i_CTRL-\_CTRL-o (execute one normal mode command in insert mode, don't move the cursor)

* check map error in excessKeys.nu (re vs r duplicate mapping)
* bundle commands not repeatable with dot
* :*buffer doesn't push on jump list
* split views top line is ANNOYINGLY changed when editing in another view
* ctrl-^ with 'noprefertabs' should probably keep lastDocument per view, not per window

* move statusbar / ex command line to each document view
* jumps doesn't work in untitled files
* bundle commands time out when presenting ui
* switch undo direction after bundle command
* o and O commands with a count does the wrong thing
* searching is slow on large files, naÃ¯ve implementation
* push jumps
* ctrl-y scrolls weirdly with lots of control characters (glyph vs characters?)

* define custom commands, see http://help.vicoapp.com/ideas/tag-text-objects-commands
* :q should optionally terminate / hide app on last document in last window?
* indented paste
* showAsHtml + dontFollowOutput (?)
* Reload themes!
* Reload bundles!
* :write !program
* :read
* :read !program
* :edit! => revert
* support a count in C and h commands

* o in visual mode should move to opposite side of selection
* @jtregunna: can you make it so we don't get a file changed
              notification when the file hashes are the same? ie, switching branches
              in a git repo
* ability to direct stderr to other place than (or, separately from) stdout in bundle commands
* Ability to edit tmbundles within the app (HN)
* @kamens: Any way to resize splits w/ key bindings? Like <c-w>_ or <c-w>+
* completion expressions in nu
* p/P with a count
* J with visual selection, and J with a count
* +/- commands
* global marks (A-Z)
* open alternative file (.h/.c/.m)
* :map commands
* preference pane for editing macros?
* honor bundle ordering when showing ambiguous items menu
* move split views relative each other
* convert horizontal split to vertical and vice versa
* set incsearch
* set hlsearch
* set listchars
* symbol list should use same filtering algorithm as file explorer
* implement R
* :normal!
* project shell variables
* draw marks in gutter view
* action menu on document tabs with
  * close tab
  * close others
* dynamic headIndent paragraph style dependent on line indentation
* cdpath setting? looked at by :edit
* 0<C-D> in insert mode removes all indentation
* g$ and g0 and g^

* ODB Editor suite

LONG TERM FEATURES
==================
* syntax / scope inspector, like in espresso.app
  * remove show_scope: and shift-ctrl-p mapping
* scope injection
* preview location while searching/traversing symbol list
  - esc cancels, go back to before
  - enter/click shows yellow highlight
* block selection with ctrl-v + block editing
* undo tree + visualisation (check out Gundo)
* integrated terminal

* project search
* @lampshadish: All I need now is some sort of recursive-find-in-directory and I can switch. Maybe using #ack so it doesn't block like in TextMate.

* @growt: Some neat git integration would be great, like coloring the line number of rows that changed or a diff-tool. but first things first


IDEAS
=====
* define vi commands for bundle actions when loading a bundle in order to unify key handling between vi and bundles
  * should be able to undefine them when the bundle is unloaded / disabled
  * probably need a "source" attribute on a ViMapping to tell it who defined it (bundle, site.nu, default keys.nu, other, preference window)
* ex :command calling for bundle commands? arguments?

