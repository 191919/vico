* :/search doesn't work with 'nowrapscan'

* search with 'nowrapscan' should issue 'not found' message

* xcode/Run throws exception:
2011-08-15 13:42:56.959 Vico[3043:403] [<__NSCFString 0x4016dcec0> valueForUndefinedKey:]: this class is not key value coding-compliant for the key title.
2011-08-15 13:42:56.967 Vico[3043:403] (
	0   CoreFoundation                      0x00007fff8f53a986 __exceptionPreprocess + 198
	1   libobjc.A.dylib                     0x00007fff8a789d5e objc_exception_throw + 43
	2   CoreFoundation                      0x00007fff8f5c45a9 -[NSException raise] + 9
	3   Foundation                          0x00007fff8dedce6f -[NSObject(NSKeyValueCoding) valueForUndefinedKey:] + 240
	4   Foundation                          0x00007fff8de13d96 _NSGetUsingKeyValueGetter + 108
	5   Foundation                          0x00007fff8de13d1d -[NSObject(NSKeyValueCoding) valueForKey:] + 392
	6   Foundation                          0x00007fff8de3379e -[NSObject(NSKeyValueCoding) valueForKeyPath:] + 348
	7   AppKit                              0x00007fff8b52ded5 -[NSArrayController _multipleValueForKeyPath:atIndex:] + 84
	8   AppKit                              0x00007fff8b52bbac -[_NSControllerArrayProxy _valueForKeyPath:ofObjectAtIndex:] + 29
	9   AppKit                              0x00007fff8b294be2 -[NSBinder _valueForKeyPath:ofObject:mode:raisesForNotApplicableKeys:] + 710
	10  AppKit                              0x00007fff8b54216c -[NSBinder valueForBinding:atIndex:resolveMarkersToPlaceholders:] + 434
	11  AppKit                              0x00007fff8b8dfe71 -[NSValueBinder _referenceBindingValueAtIndex:] + 35
	12  AppKit                              0x00007fff8b497235 -[NSValueBinder _adjustObject:mode:observedController:observedKeyPath:context:editableState:adjustState:] + 857
	13  AppKit                              0x00007fff8b8dfaee -[NSValueBinder updateTableColumnDataCell:forDisplayAtIndex:] + 145
	14  AppKit                              0x00007fff8b847731 -[NSTextValueBinder updateTableColumnDataCell:forDisplayAtIndex:] + 79
	15  AppKit                              0x00007fff8b91f30d -[_NSBindingAdaptor tableColumn:willDisplayCell:row:] + 112
	16  AppKit                              0x00007fff8b345948 -[NSTableView preparedCellAtColumn:row:] + 654
	17  AppKit                              0x00007fff8b356787 -[NSTableView _drawContentsAtRow:column:withCellFrame:] + 42
	18  AppKit                              0x00007fff8b354cbe -[NSTableView drawRow:clipRect:] + 1647
	19  AppKit                              0x00007fff8b35449b -[NSTableView drawRowIndexes:clipRect:] + 565
	20  AppKit                              0x00007fff8b3526f3 -[NSTableView drawRect:] + 1390
	21  AppKit                              0x00007fff8b2b9768 -[NSView _drawRect:clip:] + 3758
	22  AppKit                              0x00007fff8b2e7131 -[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 1583
	23  AppKit                              0x00007fff8b2e755d -[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2651
	24  AppKit                              0x00007fff8b2e755d -[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2651
	25  AppKit                              0x00007fff8b2e755d -[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2651
	26  AppKit                              0x00007fff8b2e755d -[NSView _recursiveDisplayAllDirtyWithLockFocus:visRect:] + 2651
	27  AppKit                              0x00007fff8b2b6d46 -[NSView _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 1032
	28  AppKit                              0x00007fff8b2b623c -[NSThemeFrame _recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:] + 270
	29  AppKit                              0x00007fff8b2b164a -[NSView _displayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:] + 4755
	30  AppKit                              0x00007fff8b2aa093 -[NSView displayIfNeeded] + 1676
	31  AppKit                              0x00007fff8b2a97d3 _handleWindowNeedsDisplayOrLayoutOrUpdateConstraints + 648
	32  CoreFoundation                      0x00007fff8f4fa647 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23
	33  CoreFoundation                      0x00007fff8f4fa5a6 __CFRunLoopDoObservers + 374
	34  CoreFoundation                      0x00007fff8f4cf889 __CFRunLoopRun + 825
	35  CoreFoundation                      0x00007fff8f4cf216 CFRunLoopRunSpecific + 230
	36  HIToolbox                           0x00007fff849c94ff RunCurrentEventLoopInMode + 277
	37  HIToolbox                           0x00007fff849d0c21 ReceiveNextEventCommon + 355
	38  HIToolbox                           0x00007fff849d0aae BlockUntilNextEventMatchingListInMode + 62
	39  AppKit                              0x00007fff8b26e191 _DPSNextEvent + 659
	40  AppKit                              0x00007fff8b26da95 -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 135
	41  AppKit                              0x00007fff8b26a3d6 -[NSApplication run] + 463
	42  AppKit                              0x00007fff8b4e852a NSApplicationMain + 867
	43  Vico                                0x0000000100002983 main + 275
	44  Vico                                0x0000000100001944 start + 52
)

* cw<cmd-v> and repeat inserts pasteboard twice

! vertical splits are buggy

* can't :edit a directory (was buggy in 1.1 too)

* don't overwrite read-only files!

* go back to last focused document when closing a document

! Must store bundles in a dictionary, should NOT duplicate bundles with same bundle UUID!
* Downloading tmbundles seems to duplicate tab triggers (HN)

* list ctrl-s in menus
* list ctrl-n in menus (and other completions)




* can we map ys to a new operator (surround), with y{motion} still working?

* let untitled documents have a custom title:
  -> untitled documents should show up in ctrl-s completions
  -> commands can re-use special buffers (ie, a *finger* buffer, or a *shell* buffer)

* order fuzzy search results wrt last opened/used time

* less lame notification of modified documents in tabs (don't append * in title!)

* replace ViError class with NSError category

* @godDLL: can I have a preference to open new files that were opened
  externally (double-click in Finder, vicotool, etc) not in a new tab, not
  in current view, but in a new window?

* vim text objects, especially i[, a] and it, at
* vicotool --line 1
* R (replace mode)
* i_CTRL-o (execute one normal mode command in insert mode)
* i_CTRL-\_CTRL-o (execute one normal mode command in insert mode, don't move the cursor)

* should check all documents for external changes when app becomes active again
* check map error in excessKeys.nu (re vs r duplicate mapping)
* "&" in :s replace part should expand to whole match? (use $0 for now)
* explorer flickers when opening new windows!
* bundle commands not repeatable with dot
* :*buffer doesn't push on jump list
* split views top line is ANNOYINGLY changed when editing in another view
* ctrl-^ with 'noprefertabs' should probably keep lastDocument per view, not per window

* jumps doesn't work in untitled files
* when renaming a file in the explorer, selection should follow after re-sorting
* bundle commands time out when presenting ui
* switch undo direction after bundle command
* o and O commands with a count does the wrong thing
? caret location is messed up after undo of bundle command
* jumpy selection in symbol list when clicking symbol
* vi always has a newline at EOF
* searching is slow on large files, naÃ¯ve implementation
* yk and yj commands don't position caret correctly
* push marks
* push jumps
* ctrl-y scrolls weirdly with lots of control characters (glyph vs characters?)

* define custom commands, see http://help.vicoapp.com/ideas/tag-text-objects-commands
? :q should terminate app on last document in last window?
* indented paste
* showAsHtml + dontFollowOutput (?)
* Reload themes!
* Reload bundles!
* :write !program
* :read
* :read !program
* :edit! => revert
* support a count in C and h commands
* highlight caret after goto line

* o in visual mode should move to opposite side of selection
* @jtregunna: can you make it so we don't get a file changed
              notification when the file hashes are the same? ie, switching branches
              in a git repo
* ability to direct stderr to other place than (or, separately from) stdout in bundle commands
* Ability to edit tmbundles within the app (HN)
* @kamens: Any way to resize splits w/ key bindings? Like <c-w>_ or <c-w>+
* :mkdir command
* completion expressions in nu
* p/P with a count
* J with visual selection, and J with a count
* +/- commands
* global marks (A-Z)
* open alternative file (.h/.c/.m)
* :map commands
* preference pane for editing macros?
* honor bundle ordering when showing ambiguous items menu
* move split views relative each other
* convert horizontal split to vertical and vice versa
* set incsearch
* set hlsearch
* set listchars
* symbol list should use same filtering algorithm as file explorer
* implement R
* implement c-w in insert mode
* implement c-u in insert mode (vim: delete to beginning-of-line)
* :normal!
* project shell variables
* draw marks in gutter view
* action menu on document tabs with
  * close tab
  * close others
* dynamic headIndent paragraph style dependent on line indentation
* cdpath setting? looked at by :edit
* 0<C-D> in insert mode removes all indentation
* g$ and g0 and g^

* ODB Editor suite

LONG TERM FEATURES
==================
* syntax / scope inspector, like in espresso.app
  * remove show_scope: and shift-ctrl-p mapping
* scope injection
* preview location while searching/traversing symbol list
  - esc cancels, go back to before
  - enter/click shows yellow highlight
* block selection with ctrl-v + block editing
* undo tree + visualisation (check out Gundo)
* integrated terminal

* project search
* @lampshadish: All I need now is some sort of recursive-find-in-directory and I can switch. Maybe using #ack so it doesn't block like in TextMate.

* @growt: Some neat git integration would be great, like coloring the line number of rows that changed or a diff-tool. but first things first


IDEAS
=====
* define vi commands for bundle actions when loading a bundle in order to unify key handling between vi and bundles
  * should be able to undefine them when the bundle is unloaded / disabled
  * probably need a "source" attribute on a ViMapping to tell it who defined it (bundle, site.nu, default keys.nu, other, preference window)
* ex :command calling for bundle commands? arguments?

