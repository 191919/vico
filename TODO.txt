# 1.3

* rename in file explorer is borken
* closing with prefertabs=YES re-opens immediately!?

## errata

* group by attribute != grouped display string
* can't assume ack's output is in newline chunks
* don't overwrite read-only files!
* show baseURL in window title!
* explorer spinner is hidden by new path control
  => move it, where!? auto-hide something else?


# 1.4: focus on textmate bundles and nu scripting

* explorer bundle commands (scm stuff)

* define custom commands, see http://help.vicoapp.com/ideas/tag-text-objects-commands

* define vi commands for bundle actions when loading a bundle in order to unify key handling between vi and bundles
  * should be able to undefine them when the bundle is unloaded / disabled
  * probably need a "source" attribute on a ViMapping to tell it who defined it (bundle, site.nu, default keys.nu, other, preference window)
* bundle commands not repeatable with dot

* Bundle editor
* Reload themes!
* Reload bundles!

* bundle pref pane should list actually installed bundles, not only those whose github owner is listed
* honor bundle ordering when showing ambiguous items menu



# 1.5: focus on UI

* move statusbar / ex command line to each document view
* move split views relative each other
* convert horizontal split to vertical and vice versa
* @kamens: Any way to resize splits w/ key bindings? Like <c-w>_ or <c-w>+

* less lame notification of modified documents in tabs (don't append * in title!)
* bring back explorer / folder bookmarks
* ctags should present menu for duplicate tags
* draw marks in gutter view
* preference pane for editing macros?

* switchable/scriptable sidebar panels + flexible placement (left/right) + joined (horizontally split at same side)
    * split explorer that only shows a subset of files, based on scope, eg all scm.* files
    * scriptable sidebar view that shows a mark stack, eg Ack Results or the errorlist / locationlist

* action menu on document tabs with
    * close tab
    * close others

* `:%s/pattern/replace/gc` should confirm every replace

? sticky split views


# 1.6: focus on project stuff

* project shell variables
* drag'n'drop to explorer could create a symlink in the filesystem
* hide certain files/folders + remember in a project setting
* smart folders? create a spotlight search for all ruby files, all nib files, recently edited files


# 1.7: focus on smart completion

* completion expressions in nu



## Bugs

* unicode characters in line and cursor sits over 2 chars

* cw<cmd-v> and repeat inserts pasteboard twice
* repeating completed text should not re-trigger completion!

* xcode/Run throws exception:

    2011-08-15 13:42:56.959 Vico[3043:403] [<__NSCFString 0x4016dcec0> valueForUndefinedKey:]: this class is not key value coding-compliant for the key title.
    2011-08-15 13:42:56.967 Vico[3043:403] (
        0   CoreFoundation                      0x00007fff8f53a986 __exceptionPreprocess + 198
        1   libobjc.A.dylib                     0x00007fff8a789d5e objc_exception_throw + 43
        2   CoreFoundation                      0x00007fff8f5c45a9 -[NSException raise] + 9
        3   Foundation                          0x00007fff8dedce6f -[NSObject(NSKeyValueCoding) valueForUndefinedKey:] + 240


* vertical splits are buggy (filed as radar 10187396)
* searching is slow on large files, na√Øve implementation
* ctrl-y scrolls weirdly with lots of control characters (glyph vs characters?)


## Todo

* list ctrl-s in menus
* list ctrl-n in menus (and other completions)
* document :s replacement syntax ($0, ${?0:bla} etc)
* can we map ys to a new operator (surround), with y{motion} still working?


## Missing vi features

* vim tag text objects (it, at) (or leave to plugins?)
* R (replace mode)
* i_CTRL-o (execute one normal mode command in insert mode)
* i_CTRL-\_CTRL-o (execute one normal mode command in insert mode, don't move the cursor)
* o and O commands with a count does the wrong thing
* :write !program
* :read
* :read !program
* support a count in C and h commands
* p/P with a count
* J with visual selection, and J with a count
* :map commands
* set incsearch
* set hlsearch
* set listchars
* implement R
* :normal!
* 0<C-D> in insert mode removes all indentation
* g$ and g0 and g^
* Ctrl+X and Ctrl+A decremented/incremented a number



## Features

* vicotool as filter / read from stdin
* scriptable settings with :set
* notion of <leader> key in maps

* "Open all with current extension as..." menu like sublime in language syntax menu
* let untitled documents have a custom title:
  -> untitled documents should show up in ctrl-s completions
  -> commands can re-use special buffers (ie, a *finger* buffer, or a *shell* buffer)

* order fuzzy search results wrt last opened/used time
* replace ViError class with NSError category

* @godDLL: can I have a preference to open new files that were opened
  externally (double-click in Finder, vicotool, etc) not in a new tab, not
  in current view, but in a new window?

* vicotool +excmd file

* check map error in excessKeys.nu (re vs r duplicate mapping)
* split views top line is ANNOYINGLY changed when editing in another view
* ctrl-^ with 'noprefertabs' should probably keep lastDocument per view, not per window

* bundle commands time out when presenting ui
* switch undo direction after bundle command

* indented paste

* @jtregunna: can you make it so we don't get a file changed
              notification when the file hashes are the same? ie, switching branches
              in a git repo
* open alternative file (.h/.c/.m)
* symbol list should use same filtering algorithm as file explorer
* dynamic headIndent paragraph style dependent on line indentation

* ODB Editor suite



## Long term features

* syntax / scope inspector, like in espresso.app
  * remove show_scope: and shift-ctrl-p mapping
* scope injection
* preview location while searching/traversing symbol list
  - esc cancels, go back to before
  - enter/click shows yellow highlight
* block selection with ctrl-v + block editing
* undo tree + visualisation (check out Gundo)
* integrated terminal


## Ideas

* ex :command calling for bundle commands? arguments?
* ability to direct stderr to other place than (or, separately from) stdout in bundle commands

