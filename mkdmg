#!/bin/sh

VERSION=$1
if test -z "$VERSION"; then
	echo "missing version"
	exit 2
fi

echo "Building vibrant version $VERSION"

xcodebuild -project vibrant.xcodeproj -target vibrant -configuration Release clean build VERSION=$VERSION || exit

TMPDMG=vibrant-tmp.dmg
/bin/rm -f $TMPDMG

die()
{
    echo "$1"
    test -n "$MYDEV" && hdiutil eject $MYDEV
    /bin/rm -f $TMPDMG
    exit 1
}

APP=build/Release/vibrant.app

echo "Stripping binary"
strip $APP/Contents/MacOS/vibrant

VOL="vibrant-$VERSION"
echo "Creating disk image $VOL"

# clean up if we're interrupted
trap 'rm -f $TMPDMG; exit 1' 2 3 15

# create a disk image
hdiutil create -megabytes 30 $TMPDMG -layout NONE
# associate a device with this but don't mount it
MYDEV=`hdid -nomount $TMPDMG`
test -n "$MYDEV" || die "failed to attach disk image"
# create a file system
newfs_hfs -v "$VOL" $MYDEV || die "failed to create file system"
# diassociate device
hdiutil eject $MYDEV
# mount it
hdid $TMPDMG || die "failed to mount disk image"

root="/Volumes/$VOL"

# copy stuff to the disk image
/bin/cp -R $APP "$root" || die "failed to copy application to disk image"
#/bin/cp README.txt "$root" || die "failed to copy README.txt to disk image"

ln -s /Applications $root/Applications

rm -f $VOL.dmg

# eject
hdiutil eject $MYDEV
# compress it and make it read only
hdiutil convert -format UDZO $TMPDMG -o $VOL.dmg
/bin/rm -f $TMPDMG
ls -lh $VOL.dmg

